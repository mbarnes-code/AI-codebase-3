# Generated by Django 5.1.1 on 2024-10-07 18:58

from django.db import migrations, models


def init_combo_counts(apps, schema_editor):
    CardInCombo = apps.get_model('spellbook', 'CardInCombo')
    TemplateInCombo = apps.get_model('spellbook', 'TemplateInCombo')
    FeatureNeededInCombo = apps.get_model('spellbook', 'FeatureNeededInCombo')
    FeatureProducedInCombo = apps.get_model('spellbook', 'FeatureProducedInCombo')
    VariantOfCombo = apps.get_model('spellbook', 'VariantOfCombo')
    Combo = apps.get_model('spellbook', 'Combo')
    Combo.objects.update(
        card_count=models.functions.Coalesce(
            models.Subquery(
                CardInCombo
                .objects
                .filter(combo=models.OuterRef('pk'))
                .values('combo')
                .annotate(total=models.Sum('quantity'))
                .values('total'),
            ),
            0,
        ) + models.functions.Coalesce(
            models.Subquery(
                TemplateInCombo
                .objects
                .filter(combo=models.OuterRef('pk'))
                .values('combo')
                .annotate(total=models.Sum('quantity'))
                .values('total'),
            ),
            0,
        ),
        variant_count=models.functions.Coalesce(
            models.Subquery(
                VariantOfCombo
                .objects
                .filter(combo=models.OuterRef('pk'))
                .values('combo')
                .annotate(total=models.Count('pk'))
                .values('total'),
            ),
            0,
        ),
    )
    Combo.objects.update(
        ingredient_count=models.F('card_count') + models.functions.Coalesce(
            models.Subquery(
                FeatureNeededInCombo
                .objects
                .filter(combo=models.OuterRef('pk'))
                .values('combo')
                .annotate(total=models.Sum('quantity'))
                .values('total'),
            ),
            0,
        ),
        result_count=models.functions.Coalesce(
            models.Subquery(
                FeatureProducedInCombo
                .objects
                .filter(combo=models.OuterRef('pk'))
                .values('combo')
                .annotate(total=models.Count('pk'))
                .values('total'),
            ),
            0,
        ),
    )


def init_variant_counts(apps, schema_editor):
    Variant = apps.get_model('spellbook', 'Variant')
    Variant.objects.update(
        ingredient_count=models.F('card_count'),
    )


def init_suggestion_counts(apps, schema_editor):
    CardUsedInVariantSuggestion = apps.get_model('spellbook', 'CardUsedInVariantSuggestion')
    TemplateRequiredInVariantSuggestion = apps.get_model('spellbook', 'TemplateRequiredInVariantSuggestion')
    FeatureProducedInVariantSuggestion = apps.get_model('spellbook', 'FeatureProducedInVariantSuggestion')
    VariantSuggestion = apps.get_model('spellbook', 'VariantSuggestion')
    VariantSuggestion.objects.update(
        card_count=models.functions.Coalesce(
            models.Subquery(
                CardUsedInVariantSuggestion
                .objects
                .filter(variant=models.OuterRef('pk'))
                .values('variant')
                .annotate(total=models.Sum('quantity'))
                .values('total'),
            ),
            0,
        ) + models.functions.Coalesce(
            models.Subquery(
                TemplateRequiredInVariantSuggestion
                .objects
                .filter(variant=models.OuterRef('pk'))
                .values('variant')
                .annotate(total=models.Sum('quantity'))
                .values('total'),
            ),
            0,
        ),
    )
    VariantSuggestion.objects.update(
        ingredient_count=models.F('card_count'),
        result_count=models.functions.Coalesce(
            models.Subquery(
                FeatureProducedInVariantSuggestion
                .objects
                .filter(variant=models.OuterRef('pk'))
                .values('variant')
                .annotate(total=models.Count('pk'))
                .values('total'),
            ),
            0,
        ),
    )


class Migration(migrations.Migration):

    dependencies = [
        ('spellbook', '0033_rename_cards_count_variant_card_count_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='combo',
            name='card_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AddField(
            model_name='combo',
            name='ingredient_count',
            field=models.PositiveSmallIntegerField(default=0, editable=False),
        ),
        migrations.AddField(
            model_name='combo',
            name='result_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AddField(
            model_name='variant',
            name='ingredient_count',
            field=models.PositiveSmallIntegerField(default=0, editable=False),
        ),
        migrations.AddField(
            model_name='variantsuggestion',
            name='card_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AddField(
            model_name='variantsuggestion',
            name='ingredient_count',
            field=models.PositiveSmallIntegerField(default=0, editable=False),
        ),
        migrations.AddField(
            model_name='variantsuggestion',
            name='result_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='combo',
            name='name',
            field=models.CharField(default='', editable=False, max_length=3925),
        ),
        migrations.AlterField(
            model_name='variant',
            name='card_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='variant',
            name='name',
            field=models.CharField(default='', editable=False, max_length=3925),
        ),
        migrations.AlterField(
            model_name='variant',
            name='result_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='variantsuggestion',
            name='name',
            field=models.CharField(default='', editable=False, max_length=3925),
        ),
        migrations.AddField(
            model_name='combo',
            name='variant_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='card',
            name='variant_count',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.RunPython(init_combo_counts, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(init_variant_counts, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(init_suggestion_counts, reverse_code=migrations.RunPython.noop),
    ]
