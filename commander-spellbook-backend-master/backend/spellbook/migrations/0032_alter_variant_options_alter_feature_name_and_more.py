# Generated by Django 5.1.1 on 2024-10-01 14:35

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('spellbook', '0031_public_notes_and_alter_variantsuggestion_status'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='variant',
            options={'default_manager_name': 'objects', 'ordering': [models.Case(models.When(status='N', then=models.Value(0)), models.When(status='D', then=models.Value(1)), models.When(status='OK', then=models.Value(2)), models.When(status='E', then=models.Value(3)), models.When(status='R', then=models.Value(4)), models.When(status='NW', then=models.Value(5)), default=models.Value(10)), '-created'], 'verbose_name': 'variant', 'verbose_name_plural': 'variants'},
        ),
        migrations.AlterField(
            model_name='feature',
            name='name',
            field=models.CharField(help_text='Short name for a produced effect', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Must start with a capital letter.', regex='^[A-Z]'), django.core.validators.RegexValidator(message='Must not end with punctuation.', regex='[A-Za-z0-9()\\{\\}\\"]$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{2,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)'), django.core.validators.RegexValidator(inverse_match=True, message='Reserved characters are not allowed. Examples of reserved characters: $, |.', regex='\\$|\\|'), django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='name of feature'),
        ),
        migrations.AlterField(
            model_name='featureproducedinvariantsuggestion',
            name='feature',
            field=models.CharField(help_text='Feature name', max_length=255, validators=[django.core.validators.RegexValidator(message='Must start with a capital letter.', regex='^[A-Z]'), django.core.validators.RegexValidator(message='Must not end with punctuation.', regex='[A-Za-z0-9()\\{\\}\\"]$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{2,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)'), django.core.validators.RegexValidator(inverse_match=True, message='Reserved characters are not allowed. Examples of reserved characters: $, |.', regex='\\$|\\|'), django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='feature name'),
        ),
        migrations.AlterField(
            model_name='template',
            name='name',
            field=models.CharField(help_text='short description of the template in natural language', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Must start with a capital letter.', regex='^[A-Z]'), django.core.validators.RegexValidator(message='Must not end with punctuation.', regex='[A-Za-z0-9()\\{\\}\\"]$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{2,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)'), django.core.validators.RegexValidator(inverse_match=True, message='Reserved characters are not allowed. Examples of reserved characters: $, |.', regex='\\$|\\|'), django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='template name'),
        ),
        migrations.AlterField(
            model_name='templaterequiredinvariantsuggestion',
            name='template',
            field=models.CharField(help_text='Template name', max_length=255, validators=[django.core.validators.RegexValidator(message='Must start with a capital letter.', regex='^[A-Z]'), django.core.validators.RegexValidator(message='Must not end with punctuation.', regex='[A-Za-z0-9()\\{\\}\\"]$'), django.core.validators.RegexValidator(inverse_match=True, message='URLs are not allowed.', regex='[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{2,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)'), django.core.validators.RegexValidator(inverse_match=True, message='Reserved characters are not allowed. Examples of reserved characters: $, |.', regex='\\$|\\|'), django.core.validators.RegexValidator(message='Unpaired double square brackets are not allowed.', regex='^(?:[^\\[]*(?:\\[(?!\\[)|\\[{2}[^\\[]+\\]{2}|\\[{3,}))*[^\\[]*$'), django.core.validators.RegexValidator(message='Symbols must be in the {1}{W}{U}{B}{R}{G}{B/P}{A}{E}{T}{Q}... format.', regex='^(?:[^\\{]*\\{(?:(?:2\\/[WUBRG]|W\\/U|W\\/B|B\\/R|B\\/G|U\\/B|U\\/R|R\\/G|R\\/W|G\\/W|G\\/U)(?:\\/P)?|CHAOS|PW|TK|[WUBRG](?:\\/P)?|[1-9][0-9]{1,2}|H[WUBRG]|[0-9CPXYZSTQEA½∞])\\})*[^\\{]*$'), django.core.validators.RegexValidator(message='Only ordinary characters are allowed.', regex='^[\\x0A\\x0D\\x20-\\x7E\\x80\\x95\\x99\\xA1\\xA9\\xAE\\xB0\\xB1-\\xB3\\xBC-\\xFF]*$')], verbose_name='template name'),
        ),
    ]
